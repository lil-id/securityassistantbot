const axios = require("axios");
const logger = require("../helpers/logger");
require("dotenv").config();

async function getMalwareList(client, message, args) {
    logger.info("Fetching malware list from Threatfox...");
    const chat = await client.getChatById(message.from);
    await chat.sendSeen();
    await chat.sendStateTyping();
    const commandOption = args.join(" ");

    const requestData = {
        query: "malware_list"
    };

    try {
        const response = await axios.post(
            `${process.env.THREATFOX_API_URL}/api/v1/`,
            requestData,
            { headers: { "Auth-Key": process.env.THREATFOX_AUTH_KEY } }
        );
    
        const data = response.data?.data;
    
        if (data && Object.keys(data).length > 0) {
            const sliceCount = parseInt(commandOption, 10) || 10;
            const latestMalwareEntries = Object.entries(data).slice(-sliceCount);
    
            let malwareMessage = `Latest ${commandOption} Malware Alerts\n\n`;
    
            latestMalwareEntries.forEach(([key, malware], index) => {
                malwareMessage += `🦠 *Malware ID*: ${index + 1}\n`;
                malwareMessage += `👾 *OS*: ${key}\n`;
                malwareMessage += `☣️ *Name:* ${malware.malware_printable}\n`;
                malwareMessage += `🪪 *Alias:* ${malware.malware_alias || "N/A"}\n\n`;
            });
    
            await message.reply(malwareMessage.trim());
            await message.reply("📌 Use `!malware <number>` to get more malware entries.\n\n✅ Example:\n`!malware 20` → Get 20 entries malware list");
        } else {
            await message.reply("No malware found.");
            logger.info("No malware found.");
        }       
    } catch (error) {
        logger.error(
            "Error looking up malware list from ThreatFox:",
            error.response?.data || error.message
        );
        await message.reply("Error fetching malware list from ThreatFox. Please try again later.");
        return null;
    }
}

module.exports = { getMalwareList };