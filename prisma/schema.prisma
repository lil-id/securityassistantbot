// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  id                   Int                   @id @default(autoincrement())
  role                 UserRoles             @default(admin)
  name                 String?
  numberPhone          String                @unique
  createdAt            DateTime              @default(now())
  AdminActicitylogs    AdminActicitylogs[]
  JWTAccessTokenAdmins JWTAccessTokenAdmins?
  ReportAdmins         ReportAdmins[]
  FeedbackAdmins       FeedbackAdmins[]

  @@map("admins")
}

model JWTAccessTokenAdmins {
  id        String    @id @default(uuid())
  idAdmin   Int       @unique
  token     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  expiredIn DateTime?
  Admins    Admins    @relation(fields: [idAdmin], references: [id], onDelete: Cascade)

  @@map("jwtaccesstokenadmins")
}

model AdminActicitylogs {
  id        Int      @id @default(autoincrement())
  admin     Admins?  @relation(fields: [idAdmin], references: [id], onDelete: SetNull)
  idAdmin   Int?
  name      String?
  activity  String?
  createdAt DateTime @default(now())

  @@map("adminacticitylogs")
}

model Users {
  id                  Int                  @id @default(autoincrement())
  role                UserRoles            @default(user)
  name                String?
  numberPhone         String               @unique
  createdAt           DateTime             @default(now())
  FeedbackUsers       FeedbackUsers[]
  ReportUsers         ReportUsers[]
  UserActicitylogs    UserActicitylogs[]
  JWTAccessTokenUsers JWTAccessTokenUsers?

  @@map("users")
}

model UserActicitylogs {
  id        Int      @id @default(autoincrement())
  user      Users?   @relation(fields: [idUser], references: [id], onDelete: SetNull)
  idUser    Int?
  name      String?
  activity  String?
  createdAt DateTime @default(now())

  @@map("useracticitylogs")
}

model JWTAccessTokenUsers {
  id        String    @id @default(uuid())
  idUser    Int       @unique
  token     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  expiredIn DateTime?
  Users     Users     @relation(fields: [idUser], references: [id], onDelete: Cascade)

  @@map("jwtaccesstokenusers")
}

model ReportUsers {
  id        Int      @id @default(autoincrement())
  user      Users?   @relation(fields: [idUser], references: [id], onDelete: SetNull)
  idUser    Int?
  name      String?
  evidence  String?
  report    String?
  createdAt DateTime @default(now())

  @@map("reportusers")
}

model ReportAdmins {
  id        Int      @id @default(autoincrement())
  admin     Admins?  @relation(fields: [idAdmin], references: [id], onDelete: SetNull)
  idAdmin   Int?
  name      String?
  evidence  String?
  report    String?
  createdAt DateTime @default(now())

  @@map("reportadmins")
}

model FeedbackUsers {
  id        Int      @id @default(autoincrement())
  user      Users?   @relation(fields: [idUser], references: [id], onDelete: SetNull)
  idUser    Int?
  name      String?
  feedback  String?
  createdAt DateTime @default(now())

  @@map("feedbackusers")
}

model FeedbackAdmins {
  id        Int      @id @default(autoincrement())
  admin     Admins?  @relation(fields: [idAdmin], references: [id], onDelete: SetNull)
  idAdmin   Int?
  name      String?
  feedback  String?
  createdAt DateTime @default(now())

  @@map("feedbackadmins")
}

model CronJobsSchedule {
  id         Int     @id @default(autoincrement())
  hourMinute String?
  dayOfMonth String?
  dayOfWeek  String?
  month      String?

  @@map("cronjobsschedule")
}

enum UserRoles {
  admin
  user
}
